package com.yafatek;public class Main {	Node root;	public static void main(String[] args) {		// write your code here		Main main = new Main();		int val = 1 - (-1);		System.out.println(val);		main.addNodes(50, "Boss");		main.addNodes(25, "Vice Pres");		main.addNodes(15, "Office Manager");		main.addNodes(30, "Secretary");		main.addNodes(75, "Sales Manager");		main.addNodes(85, "Sales Man1");//		Long time = System.currentTimeMillis();		System.out.println("in order");		main.inOrderTraverseTree(main.root);//		Long finish = System.currentTimeMillis() - time;//		System.out.println("InOrder Time: " + finish + " ms");//		Long time1 = System.currentTimeMillis();		System.out.println("pre Order");		main.preOrderTraverseTree(main.root);//		Long finish1 = System.currentTimeMillis() - time1;//		System.out.println("PreOrder Time: " + finish1 + " ms");//		System.out.println("Node Found : " + main.findNode(30));		System.out.println("Post Order");		main.postOrderTraverseTree(main.root);	}	public void addNodes(int key, String name) {		if (root == null) {			root = new Node(key, name);		} else {			Node focusNode = root;			Node parent;			while (true) {				parent = root;				if (key < focusNode.key) {					focusNode = focusNode.leftChild;					if (focusNode == null) {						parent.leftChild = new Node(key, name);						return;					}				} else {					focusNode = focusNode.rightChild;					if (focusNode == null) {						parent.rightChild = new Node(key, name);						return;					}				}			}		}	}	public void inOrderTraverseTree(Node focusNode) {		if (focusNode != null) {			//LDR (Left Data Right)			inOrderTraverseTree(focusNode.leftChild);//L			System.out.println(focusNode);//D			inOrderTraverseTree(focusNode.rightChild);//R		}	}	public void preOrderTraverseTree(Node focusNode) {		// DLR (Data Left Right)		if (focusNode != null) {			System.out.println(focusNode);//D			preOrderTraverseTree(focusNode.leftChild);// L			preOrderTraverseTree(focusNode.rightChild);//R		}	}	public void postOrderTraverseTree(Node focusNode) {		if (focusNode != null) {			// LRD (Left Right Date)			postOrderTraverseTree(focusNode.leftChild);			postOrderTraverseTree(focusNode.rightChild);			System.out.println(focusNode);		}	}	public Node findNode(int key) {		Node focusNode = root;		while (focusNode.key != key) {			if (key < focusNode.key) {				focusNode = focusNode.leftChild;			} else {				focusNode = focusNode.rightChild;			}			if (focusNode == null) {				return null;			}		}		return focusNode;	}	class Node {		int key;		String name;		Node leftChild;		Node rightChild;		public Node(int key, String name) {			this.key = key;			this.name = name;		}		public String toString() {			return name + " has Key: " + key;		}	}}