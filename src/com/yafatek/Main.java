package com.yafatek;public class Main {	Node root;	public static void main(String[] args) {		// write your code here		Main main = new Main();		main.addNodes(50, "Boss");		main.addNodes(25, "Vice Pres");		main.addNodes(15, "Office Manager");		main.addNodes(30, "Secretary");		main.addNodes(75, "Sales Manager");		main.addNodes(85, "Sales Man1");		Long time = System.currentTimeMillis();		main.inOrderTraverseTree(main.root);		Long finish = System.currentTimeMillis() - time;		System.out.println("InOrder Time: " + finish + " ms");		Long time1 = System.currentTimeMillis();		main.inOrderTraverseTree(main.root);		Long finish1 = System.currentTimeMillis() - time1;		System.out.println("PreOrder Time: " + finish1 + " ms");		System.out.println("Node Found : " + main.findNode(30));	}	public void addNodes(int key, String name) {		Node newNode = new Node(key, name);		if (root == null) {			root = newNode;		} else {			Node focusNode = root;			Node parent;			while (true) {				parent = focusNode;				if (key < focusNode.key) {					focusNode = focusNode.leftChild;					if (focusNode == null) {						parent.leftChild = newNode;						return;					}				} else {					focusNode = focusNode.rightChild;					if (focusNode == null) {						parent.rightChild = newNode;						return;					}				}			}		}	}	public void inOrderTraverseTree(Node focusNode) {		if (focusNode != null) {			inOrderTraverseTree(focusNode.leftChild);			System.out.println(focusNode);			inOrderTraverseTree(focusNode.rightChild);		}	}	public void preOrderTraverseTree(Node focusNode) {		if (focusNode != null) {			System.out.println(focusNode);			preOrderTraverseTree(focusNode.leftChild);			preOrderTraverseTree(focusNode.rightChild);		}	}	public Node findNode(int key) {		Node focusNode = root;		while (focusNode.key != key) {			if (key < focusNode.key) {				focusNode = focusNode.leftChild;			} else {				focusNode = focusNode.rightChild;			}			if (focusNode == null) {				return null;			}		}		return focusNode;	}	class Node {		int key;		String name;		Node leftChild;		Node rightChild;		public Node(int key, String name) {			this.key = key;			this.name = name;		}		public String toString() {			return name + " has Key: " + key;		}	}}